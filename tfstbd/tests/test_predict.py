import numpy as np
import tensorflow as tf
from ..predict import STBD


def _eval(inputs):
    precomp = {
        'Привет, друг. Ты в порядке? ': (
            ['Привет', ',', 'друг', '.', 'Ты', 'в', 'порядке', '?'],
            ['', ' ', '', ' ', ' ', ' ', '', ' '],
            [[1.17e-11, 2.56e-07, 0.99], [4.34e-11, 1.0, 7.29e-10],
             [1.0, 4.34e-11, 7.29e-10],  # Set "join" after space
             [3.75e-11, 1.0, 1.15e-09], [1.58e-11, 8.74e-08, 0.99], [3.67e-11, 1.0, 1.23e-09],
             [4.24e-11, 1.0, 7.84e-10], [4.34e-11, 1.0, 7.29e-10]]
        ),
        'Какой-то чудесный день!!!)) :)    \n @>--  Ты согласен? ': (
            ['Какой', '-', 'то', 'чудесный', 'день', '!', '!', '!', ')', ')', ':', ')', '@', '>', '-', '-', 'Ты',
             'согласен', '?'],
            ['', '', ' ', ' ', '', '', '', '', '', ' ', '', '    \n ', '', '', '', '  ', ' ', '', ' '],
            [[1.63e-13, 5.43e-08, 1.0], [0.99, 1.73e-07, 8.52e-13], [0.99, 1.63e-07, 8.64e-13],
             [2.88e-08, 1.0, 3.63e-08], [8.98e-07, 0.99, 9.34e-07], [2.72e-08, 1.0, 3.72e-08],
             [1.0, 7.08e-12, 1.26e-13], [1.0, 7.15e-12, 1.28e-13], [1.95e-07, 0.99, 1.99e-06],
             [1.0, 9.31e-11, 1.23e-11], [2.71e-08, 1.0, 3.72e-08], [1.0, 5.28e-09, 2.53e-10],
             [2.33e-03, 0.71, 0.28], [0.99, 3.71e-07, 1.32e-08], [1.0, 7.97e-10, 3.22e-12],
             [1.0, 7.97e-10, 3.22e-12], [1.63e-13, 5.44e-08, 1.0], [8.65e-11, 1.0, 1.50e-08],
             [8.68e-11, 1.0, 1.50e-08]]

        ),
        'Я сердечно поздравляю\nС Рождеством всех вас! ': (
            ['Я', 'сердечно', 'поздравляю', 'С', 'Рождеством', 'всех', 'вас', '!'],
            [' ', ' ', '\n', ' ', ' ', ' ', '', ' '],
            [[6.97e-11, 0.99, 8.15e-06],  # Set firts not a "sentence start"
             [2.06e-09, 1.0, 2.62e-08], [2.06e-09, 1.0, 2.62e-08],
             [1.05e-07, 0.99, 9.41e-07], [2.06e-09, 1.0, 2.62e-08], [2.06e-09, 1.0, 2.62e-08],
             [2.06e-09, 1.0, 2.62e-08], [2.16e-09, 1.0, 2.74e-08]]
        ),
        'паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
        'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпе'
        'пгеаепенеееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмугз ': (
            [
                'паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
                'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпе'
                'пгеаепенеееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмугз'],
            [' '],
            [[1.79e-11, 1.36e-09, 1.0]]
        )
    }

    inputs = tf.convert_to_tensor(inputs).numpy()
    inputs = np.char.decode(inputs.astype('S'), 'utf-8').tolist()

    for i in inputs:
        assert i in precomp

    words, spaces, probs = [], [], []
    for i in inputs:
        words.append(precomp[i][0])
        spaces.append(precomp[i][1])
        probs.append(precomp[i][2])
    words = tf.ragged.constant(words).to_tensor('')
    spaces = tf.ragged.constant(spaces).to_tensor('')
    probs = tf.ragged.constant(probs).to_tensor(0.)

    return words, spaces, probs


class TestSTBD(tf.test.TestCase):
    def setUp(self):
        super(TestSTBD, self).setUp()
        self.inputs = [
            'Привет, друг. Ты в порядке?',
            'Какой-то чудесный день!!!)) :)    \n @>--  Ты согласен?',
            'Я сердечно поздравляю\nС Рождеством всех вас!\n',
            'паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
            'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпе'
            'пгеаепенеееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмугз'
        ]

    def test_all_in(self):
        detector = STBD(_eval, batch_chars=9999, out_format='raw')
        result = detector(self.inputs)
        expected = [
            [[('Привет', ''), (',', ' '), ('друг', ''), ('.', ' ')],
             [('Ты', ' '), ('в', ' '), ('порядке', ''), ('?', ' ')]],
            [[('Какой-то', ' '), ('чудесный', ' '), ('день', ''), ('!!!', ''), ('))', ' '), (':)', '    \n '),
              ('@>--', '  ')],
             [('Ты', ' '), ('согласен', ''), ('?', ' ')]],
            [[('Я', ' '), ('сердечно', ' '), ('поздравляю', '\n'), ('С', ' '), ('Рождеством', ' '), ('всех', ' '),
              ('вас', ''), ('!', ' ')]],
            [[('паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
               'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпе'
               'пгеаепенеееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмугз', ' ')]]
        ]
        self.assertListEqual(expected, result)

    def test_none_in(self):
        detector = STBD(_eval, batch_chars=10, out_format='raw')
        result = detector(self.inputs)
        expected = [
            [[('Привет', ''), (',', ' '), ('друг', ''), ('.', ' ')],
             [('Ты', ' '), ('в', ' '), ('порядке', ''), ('?', ' ')]],
            [[('Какой-то', ' '), ('чудесный', ' '), ('день', ''), ('!!!', ''), ('))', ' '), (':)', '    \n '),
              ('@>--', '  ')],
             [('Ты', ' '), ('согласен', ''), ('?', ' ')]],
            [[('Я', ' '), ('сердечно', ' '), ('поздравляю', '\n'), ('С', ' '), ('Рождеством', ' '), ('всех', ' '),
              ('вас', ''), ('!', ' ')]],
            [[('паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
               'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпе'
               'пгеаепенеееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмугз', ' ')]]
        ]
        self.assertListEqual(expected, result)

    def test_conllu(self):
        detector = STBD(_eval, out_format='conllu')
        result = detector(self.inputs)
        expected = [
            '# newpar\n'
            '# sent_id = 357c5b140f3863722a2eb15a851d815f\n'
            '# text = Привет, друг.\n'
            'Привет	_	_	_	_	_	_	_	SpaceAfter=No\n'
            ',	_	_	_	_	_	_	_	_\n'
            'друг	_	_	_	_	_	_	_	SpaceAfter=No\n'
            '.	_	_	_	_	_	_	_	_\n'
            '\n'
            '# sent_id = d4e2d147ba132fb903163940f3ced62b\n'
            '# text = Ты в порядке?\n'
            'Ты	_	_	_	_	_	_	_	_\n'
            'в	_	_	_	_	_	_	_	_\n'
            'порядке	_	_	_	_	_	_	_	SpaceAfter=No\n'
            '?	_	_	_	_	_	_	_	_\n'
            '\n',

            '# newpar\n'
            '# sent_id = e2d4bccea9054478571ff25e975269e6\n'
            '# text = Какой-то чудесный день!!!)) :)      @>--\n'
            'Какой-то	_	_	_	_	_	_	_	_\n'
            'чудесный	_	_	_	_	_	_	_	_\n'
            'день	_	_	_	_	_	_	_	SpaceAfter=No\n'
            '!!!	_	_	_	_	_	_	_	SpaceAfter=No\n'
            '))	_	_	_	_	_	_	_	_\n'
            ':)	_	_	_	_	_	_	_	SpacesAfter=\\s\\s\\s\\s\\n\\s\n'
            '@>--	_	_	_	_	_	_	_	SpacesAfter=\\s\\s\n'
            '\n'
            '# sent_id = e0e8530a3c22bcb1b5da268288683e8c\n'
            '# text = Ты согласен?\n'
            'Ты	_	_	_	_	_	_	_	_\n'
            'согласен	_	_	_	_	_	_	_	SpaceAfter=No\n'
            '?	_	_	_	_	_	_	_	_\n'
            '\n',

            '# newpar\n'
            '# sent_id = 3232c860b32c619f6435208f708aae18\n'
            '# text = Я сердечно поздравляю С Рождеством всех вас!\n'
            'Я	_	_	_	_	_	_	_	_\n'
            'сердечно	_	_	_	_	_	_	_	_\n'
            'поздравляю	_	_	_	_	_	_	_	SpacesAfter=\\n\n'
            'С	_	_	_	_	_	_	_	_\n'
            'Рождеством	_	_	_	_	_	_	_	_\n'
            'всех	_	_	_	_	_	_	_	_\n'
            'вас	_	_	_	_	_	_	_	SpaceAfter=No\n'
            '!	_	_	_	_	_	_	_	_\n'
            '\n',

            '# newpar\n'
            '# sent_id = 84281dc0d3882f18b2f280d53badfb28\n'
            '# text = паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
            'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпепгеаепене'
            'ееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмугз\n'
            'паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
            'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпе'
            'пгеаепенеееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмуг'
            'з	_	_	_	_	_	_	_	_\n'
            '\n'
        ]
        self.assertListEqual(expected, result)

    def test_raw(self):
        detector = STBD(_eval, out_format='dense')
        result = detector(self.inputs)
        expected = [
            'Привет\xa0, друг\xa0.\n'
            'Ты в порядке\xa0?\n',

            'Какой-то чудесный день\xa0!!!\xa0)) :) @>--\n'
            'Ты согласен\xa0?\n',

            'Я сердечно поздравляю С Рождеством всех вас\xa0!\n',

            'паагморарпапаппапапрпрппнаепаепапапщимашившсшоапщиагмсомагмврсоосовеплпарпарспааналепаггар'
            'ыцрпнакпенуершквнрвгрщшвунппщгеннкепенеершкншкгеннеегекенеекшнашардзоагрпшпакнршоаершппгпе'
            'пгеаепенеееееепнгпеукеегшрпнрагпощрппгмлрсевлаацлщапоивнирпгагсршивщзпиуршпмугз\n'
        ]
        self.assertListEqual(expected, result)
